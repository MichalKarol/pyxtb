{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyxtb","text":""},{"location":"#pyxtb.api.DEFAULT_XAPI_ADDRESS","title":"DEFAULT_XAPI_ADDRESS","text":"<pre><code>DEFAULT_XAPI_ADDRESS = 'xapi.xtb.com'\n</code></pre>"},{"location":"#pyxtb.api.Api","title":"Api","text":"<pre><code>Api(login: int, password: str, app_name='pyxtb', address=DEFAULT_XAPI_ADDRESS, demo: bool = True)\n</code></pre> <p>Main XTB API connector</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with Api(1000000, \"password\") as api:\n&gt;&gt;&gt;     trades = await api.get_trades(openedOnly=True)\n&gt;&gt;&gt;     symbols = [await api.get_symbol(trade.symbol) for trade in trades]\n&gt;&gt;&gt;     symbol_map = {symbol.symbol: symbol for symbol in symbols}\n&gt;&gt;&gt;     print(\"Opened trades profit\")\n&gt;&gt;&gt;     for trade in trades:\n&gt;&gt;&gt;         print(f\"{symbol_map[trade.symbol].description}: {trade.profit}\")\n</code></pre> Source code in <code>pyxtb/api.py</code> <pre><code>def __init__(\n    self,\n    login: int,\n    password: str,\n    app_name=\"pyxtb\",\n    address=DEFAULT_XAPI_ADDRESS,\n    demo: bool = True,\n):\n    \"\"\"\n    Initialize Api object\n    \"\"\"\n\n    self._login = login\n    self._password = password\n    self._app_name = app_name\n    self._address = address\n    self._connection_info = Api._DEMO if demo else Api._REAL\n</code></pre>"},{"location":"#pyxtb.api.Api.__aenter__","title":"__aenter__","text":"<pre><code>__aenter__()\n</code></pre> Source code in <code>pyxtb/api.py</code> <pre><code>async def __aenter__(self):\n    await self.login()\n    return self\n</code></pre>"},{"location":"#pyxtb.api.Api.__aexit__","title":"__aexit__","text":"<pre><code>__aexit__(exc_type, exc, tb)\n</code></pre> Source code in <code>pyxtb/api.py</code> <pre><code>async def __aexit__(self, exc_type, exc, tb):\n    if self._logged_in:\n        await self.logout()\n    for stream in [\n        self._writer,\n        self._streaming_writer,\n    ]:\n        if stream and stream.can_write_eof():\n            stream.close()\n            await stream.wait_closed()\n    if self._reading_task:\n        if self._reading_task.done():\n            exception = self._reading_task.exception()\n            if exception:\n                raise exception\n        self._reading_task.cancel()\n    return False\n</code></pre>"},{"location":"#pyxtb.api.Api.get_all_symbols","title":"get_all_symbols","text":"<pre><code>get_all_symbols(**kwargs) -&gt; list[SymbolRecord]\n</code></pre> <p>Description: Returns array of all symbols available for the user.</p> <p>http://developers.xstore.pro/documentation/#getAllSymbols</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_all_symbols(self, **kwargs) -&gt; list[SymbolRecord]:\n    \"\"\"\n    Description: Returns array of all symbols available for the user.\n\n    [http://developers.xstore.pro/documentation/#getAllSymbols](http://developers.xstore.pro/documentation/#getAllSymbols)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getAllSymbols\", SymbolRecord, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_calendar","title":"get_calendar","text":"<pre><code>get_calendar(**kwargs) -&gt; list[CalendarRecord]\n</code></pre> <p>Description: Returns calendar with market events.</p> <p>http://developers.xstore.pro/documentation/#getCalendar</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_calendar(self, **kwargs) -&gt; list[CalendarRecord]:\n    \"\"\"\n    Description: Returns calendar with market events.\n\n    [http://developers.xstore.pro/documentation/#getCalendar](http://developers.xstore.pro/documentation/#getCalendar)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getCalendar\", CalendarRecord, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_chart_last_request","title":"get_chart_last_request","text":"<pre><code>get_chart_last_request(info: ChartLastInfoRecord, **kwargs) -&gt; ChartResponseRecord\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getCandles which is the preferred way of retrieving current candle data. Returns chart info, from start date to the current time. If the chosen period of CHART_LAST_INFO_RECORD  is greater than 1 minute, the last candle returned by the API can change until the end of the period (the candle is being automatically updated every minute).</p> <p>Limitations: there are limitations in charts data availability. Detailed ranges for charts data, what can be accessed with specific period, are as follows:</p> <p>PERIOD_M1 --- &lt;0-1) month, i.e. one month time PERIOD_M30 --- &lt;1-7) month, six months time PERIOD_H4 --- &lt;7-13) month, six months time PERIOD_D1 --- 13 month, and earlier on</p> <p>Note, that specific PERIOD_ is the lowest (i.e. the most detailed) period, accessible in listed range. For instance, in months range &lt;1-7) you can access periods: PERIOD_M30, PERIOD_H1, PERIOD_H4, PERIOD_D1, PERIOD_W1, PERIOD_MN1. Specific data ranges availability is guaranteed, however those ranges may be wider, e.g.: PERIOD_M1 may be accessible for 1.5 months back from now, where 1.0 months is guaranteed.</p> <p>Example scenario:</p> <ul> <li>request charts of 5 minutes period, for 3 months time span, back from now;</li> <li>response: you are guaranteed to get 1 month of 5 minutes charts; because, 5 minutes period charts are not accessible 2 months and 3 months back from now.</li> </ul> <p>http://developers.xstore.pro/documentation/#getChartLastRequest</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_chart_last_request(\n    self, info: ChartLastInfoRecord, **kwargs\n) -&gt; ChartResponseRecord:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getCandles which is the preferred way of retrieving current candle data. Returns chart info, from start date to the current time. If the chosen period of CHART_LAST_INFO_RECORD  is greater than 1 minute, the last candle returned by the API can change until the end of the period (the candle is being automatically updated every minute).\n\n    Limitations: there are limitations in charts data availability. Detailed ranges for charts data, what can be accessed with specific period, are as follows:\n\n    PERIOD_M1 --- &lt;0-1) month, i.e. one month time&lt;/br&gt;\n    PERIOD_M30 --- &lt;1-7) month, six months time&lt;/br&gt;\n    PERIOD_H4 --- &lt;7-13) month, six months time&lt;/br&gt;\n    PERIOD_D1 --- 13 month, and earlier on&lt;/br&gt;\n\n    Note, that specific PERIOD_ is the lowest (i.e. the most detailed) period, accessible in listed range. For instance, in months range &lt;1-7) you can access periods: PERIOD_M30, PERIOD_H1, PERIOD_H4, PERIOD_D1, PERIOD_W1, PERIOD_MN1. Specific data ranges availability is guaranteed, however those ranges may be wider, e.g.: PERIOD_M1 may be accessible for 1.5 months back from now, where 1.0 months is guaranteed.\n\n    Example scenario:\n\n    * request charts of 5 minutes period, for 3 months time span, back from now;\n    * response: you are guaranteed to get 1 month of 5 minutes charts; because, 5 minutes period charts are not accessible 2 months and 3 months back from now.\n\n    [http://developers.xstore.pro/documentation/#getChartLastRequest](http://developers.xstore.pro/documentation/#getChartLastRequest)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getChartLastRequest\",\n        ChartResponseRecord,\n        arguments=dict(info=info.to_dict()),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_chart_range_request","title":"get_chart_range_request","text":"<pre><code>get_chart_range_request(info: ChartRangeInfoRecord, **kwargs) -&gt; ChartResponseRecord\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getCandles which is the preferred way of retrieving current candle data. Returns chart info with data between given start and end dates.</p> <p>Limitations: there are limitations in charts data availability. Detailed ranges for charts data, what can be accessed with specific period, are as follows:</p> <p>PERIOD_M1 --- &lt;0-1) month, i.e. one month time PERIOD_M30 --- &lt;1-7) month, six months time PERIOD_H4 --- &lt;7-13) month, six months time PERIOD_D1 --- 13 month, and earlier on</p> <p>Note, that specific PERIOD_ is the lowest (i.e. the most detailed) period, accessible in listed range. For instance, in months range &lt;1-7) you can access periods: PERIOD_M30, PERIOD_H1, PERIOD_H4, PERIOD_D1, PERIOD_W1, PERIOD_MN1. Specific data ranges availability is guaranteed, however those ranges may be wider, e.g.: PERIOD_M1 may be accessible for 1.5 months back from now, where 1.0 months is guaranteed.</p> <p>http://developers.xstore.pro/documentation/#getChartRangeRequest</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_chart_range_request(\n    self, info: ChartRangeInfoRecord, **kwargs\n) -&gt; ChartResponseRecord:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getCandles which is the preferred way of retrieving current candle data. Returns chart info with data between given start and end dates.\n\n    Limitations: there are limitations in charts data availability. Detailed ranges for charts data, what can be accessed with specific period, are as follows:\n\n    PERIOD_M1 --- &lt;0-1) month, i.e. one month time&lt;br /&gt;\n    PERIOD_M30 --- &lt;1-7) month, six months time&lt;br /&gt;\n    PERIOD_H4 --- &lt;7-13) month, six months time&lt;br /&gt;\n    PERIOD_D1 --- 13 month, and earlier on&lt;br /&gt;\n\n    Note, that specific PERIOD_ is the lowest (i.e. the most detailed) period, accessible in listed range. For instance, in months range &lt;1-7) you can access periods: PERIOD_M30, PERIOD_H1, PERIOD_H4, PERIOD_D1, PERIOD_W1, PERIOD_MN1. Specific data ranges availability is guaranteed, however those ranges may be wider, e.g.: PERIOD_M1 may be accessible for 1.5 months back from now, where 1.0 months is guaranteed.\n\n    [http://developers.xstore.pro/documentation/#getChartRangeRequest](http://developers.xstore.pro/documentation/#getChartRangeRequest)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getChartRangeRequest\",\n        ChartResponseRecord,\n        arguments=dict(info=info.to_dict()),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_commission_def","title":"get_commission_def","text":"<pre><code>get_commission_def(symbol: str, volume: float, **kwargs) -&gt; CommissionDefResponseRecord\n</code></pre> <p>Description: Returns calculation of commission and rate of exchange. The value is calculated as expected value, and therefore might not be perfectly accurate.</p> <p>http://developers.xstore.pro/documentation/#getCommissionDef</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_commission_def(\n    self, symbol: str, volume: float, **kwargs\n) -&gt; CommissionDefResponseRecord:\n    \"\"\"\n    Description: Returns calculation of commission and rate of exchange. The value is calculated as expected value, and therefore might not be perfectly accurate.\n\n    [http://developers.xstore.pro/documentation/#getCommissionDef](http://developers.xstore.pro/documentation/#getCommissionDef)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getCommissionDef\",\n        CommissionDefResponseRecord,\n        arguments=dict(symbol=symbol, volume=volume),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_current_user_data","title":"get_current_user_data","text":"<pre><code>get_current_user_data(**kwargs) -&gt; CurrentUserDataRecord\n</code></pre> <p>Description: Returns calculation of commission and rate of exchange. The value is calculated as expected value, and therefore might not be perfectly accurate.</p> <p>http://developers.xstore.pro/documentation/#getCurrentUserData</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_current_user_data(self, **kwargs) -&gt; CurrentUserDataRecord:\n    \"\"\"\n    Description: Returns calculation of commission and rate of exchange. The value is calculated as expected value, and therefore might not be perfectly accurate.\n\n    [http://developers.xstore.pro/documentation/#getCurrentUserData](http://developers.xstore.pro/documentation/#getCurrentUserData)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getCurrentUserData\", CurrentUserDataRecord, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_ibs_history","title":"get_ibs_history","text":"<pre><code>get_ibs_history(end: Time, start: Time, **kwargs) -&gt; list[IBRecord]\n</code></pre> <p>Description: Returns IBs data from the given time range.</p> <p>http://developers.xstore.pro/documentation/#getIbsHistory</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_ibs_history(self, end: Time, start: Time, **kwargs) -&gt; list[IBRecord]:\n    \"\"\"\n    Description: Returns IBs data from the given time range.\n\n    [http://developers.xstore.pro/documentation/#getIbsHistory](http://developers.xstore.pro/documentation/#getIbsHistory)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getIbsHistory\", IBRecord, arguments=dict(end=end, start=start), **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_margin_level","title":"get_margin_level","text":"<pre><code>get_margin_level(**kwargs) -&gt; MarginLevelRecord\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getBalance which is the preferred way of retrieving account indicators. Returns various account indicators.</p> <p>http://developers.xstore.pro/documentation/#getMarginLevel</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_margin_level(self, **kwargs) -&gt; MarginLevelRecord:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getBalance which is the preferred way of retrieving account indicators. Returns various account indicators.\n\n    [http://developers.xstore.pro/documentation/#getMarginLevel](http://developers.xstore.pro/documentation/#getMarginLevel)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getMarginLevel\", MarginLevelRecord, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_margin_trade","title":"get_margin_trade","text":"<pre><code>get_margin_trade(symbol: str, volume: float, **kwargs) -&gt; MarginTradeRecord\n</code></pre> <p>Description: Returns expected margin for given instrument and volume. The value is calculated as expected margin value, and therefore might not be perfectly accurate.</p> <p>http://developers.xstore.pro/documentation/#getMarginTrade</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_margin_trade(\n    self, symbol: str, volume: float, **kwargs\n) -&gt; MarginTradeRecord:\n    \"\"\"\n    Description: Returns expected margin for given instrument and volume. The value is calculated as expected margin value, and therefore might not be perfectly accurate.\n\n    [http://developers.xstore.pro/documentation/#getMarginTrade](http://developers.xstore.pro/documentation/#getMarginTrade)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getMarginTrade\",\n        MarginTradeRecord,\n        arguments=dict(symbol=symbol, volume=volume),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_news","title":"get_news","text":"<pre><code>get_news(start: Time, end: Time = 0, **kwargs) -&gt; list[NewsTopicRecord]\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getNews which is the preferred way of retrieving news data. Returns news from trading server which were sent within specified period of time.</p> <p>http://developers.xstore.pro/documentation/#getNews</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_news(\n    self, start: Time, end: Time = 0, **kwargs\n) -&gt; list[NewsTopicRecord]:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getNews which is the preferred way of retrieving news data. Returns news from trading server which were sent within specified period of time.\n\n    [http://developers.xstore.pro/documentation/#getNews](http://developers.xstore.pro/documentation/#getNews)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getNews\", NewsTopicRecord, arguments=dict(end=end, start=start), **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_profit_calculation","title":"get_profit_calculation","text":"<pre><code>get_profit_calculation(closePrice: float, cmd: Command, openPrice: float, symbol: str, volume: float, **kwargs) -&gt; ProfitCalculationRecord\n</code></pre> <p>Description: Calculates estimated profit for given deal data Should be used for calculator-like apps only. Profit for opened transactions should be taken from server, due to higher precision of server calculation.</p> <p>http://developers.xstore.pro/documentation/#getProfitCalculation</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_profit_calculation(\n    self,\n    closePrice: float,\n    cmd: Command,\n    openPrice: float,\n    symbol: str,\n    volume: float,\n    **kwargs,\n) -&gt; ProfitCalculationRecord:\n    \"\"\"\n    Description: Calculates estimated profit for given deal data Should be used for calculator-like apps only. Profit for opened transactions should be taken from server, due to higher precision of server calculation.\n\n    [http://developers.xstore.pro/documentation/#getProfitCalculation](http://developers.xstore.pro/documentation/#getProfitCalculation)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getProfitCalculation\",\n        ProfitCalculationRecord,\n        arguments=dict(\n            closePrice=closePrice,\n            cmd=cmd,\n            openPrice=openPrice,\n            symbol=symbol,\n            volume=volume,\n        ),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_server_time","title":"get_server_time","text":"<pre><code>get_server_time(**kwargs) -&gt; ServerTimeRecord\n</code></pre> <p>Description: Returns current time on trading server.</p> <p>http://developers.xstore.pro/documentation/#getServerTime</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_server_time(self, **kwargs) -&gt; ServerTimeRecord:\n    \"\"\"\n    Description: Returns current time on trading server.\n\n    [http://developers.xstore.pro/documentation/#getServerTime](http://developers.xstore.pro/documentation/#getServerTime)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getServerTime\", ServerTimeRecord, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_step_rules","title":"get_step_rules","text":"<pre><code>get_step_rules(**kwargs) -&gt; list[StepRuleRecord]\n</code></pre> <p>Description: Returns a list of step rules for DMAs.</p> <p>http://developers.xstore.pro/documentation/#getStepRules</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_step_rules(self, **kwargs) -&gt; list[StepRuleRecord]:\n    \"\"\"\n    Description: Returns a list of step rules for DMAs.\n\n    [http://developers.xstore.pro/documentation/#getStepRules](http://developers.xstore.pro/documentation/#getStepRules)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getStepRules\", StepRuleRecord, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_symbol","title":"get_symbol","text":"<pre><code>get_symbol(symbol: str, **kwargs) -&gt; SymbolRecord\n</code></pre> <p>Description: Returns information about symbol available for the user.</p> <p>http://developers.xstore.pro/documentation/#getSymbol</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_symbol(self, symbol: str, **kwargs) -&gt; SymbolRecord:\n    \"\"\"\n    Description: Returns information about symbol available for the user.\n\n    [http://developers.xstore.pro/documentation/#getSymbol](http://developers.xstore.pro/documentation/#getSymbol)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getSymbol\", SymbolRecord, arguments=dict(symbol=symbol), **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_tick_prices","title":"get_tick_prices","text":"<pre><code>get_tick_prices(level: int, symbols: list[str], timestamp: Time, **kwargs) -&gt; TickPricesResponseRecord\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getTickPrices which is the preferred way of retrieving ticks data. Returns array of current quotations for given symbols, only quotations that changed from given timestamp are returned. New timestamp obtained from output will be used as an argument of the next call of this command.</p> <p>http://developers.xstore.pro/documentation/#getTickPrices</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_tick_prices(\n    self, level: int, symbols: list[str], timestamp: Time, **kwargs\n) -&gt; TickPricesResponseRecord:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getTickPrices which is the preferred way of retrieving ticks data. Returns array of current quotations for given symbols, only quotations that changed from given timestamp are returned. New timestamp obtained from output will be used as an argument of the next call of this command.\n\n    [http://developers.xstore.pro/documentation/#getTickPrices](http://developers.xstore.pro/documentation/#getTickPrices)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getTickPrices\",\n        TickPricesResponseRecord,\n        arguments=dict(level=level, symbols=symbols, timestamp=timestamp),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_trade_records","title":"get_trade_records","text":"<pre><code>get_trade_records(orders: list[int], **kwargs) -&gt; list[TradeRecord]\n</code></pre> <p>Description: Returns array of trades listed in orders argument.</p> <p>http://developers.xstore.pro/documentation/#getTradeRecords</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_trade_records(self, orders: list[int], **kwargs) -&gt; list[TradeRecord]:\n    \"\"\"\n    Description: Returns array of trades listed in orders argument.\n\n    [http://developers.xstore.pro/documentation/#getTradeRecords](http://developers.xstore.pro/documentation/#getTradeRecords)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getTradeRecords\",\n        TradeRecord,\n        arguments=dict(orders=orders),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_trades","title":"get_trades","text":"<pre><code>get_trades(openedOnly: bool, **kwargs) -&gt; list[TradeRecord]\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getTrades  which is the preferred way of retrieving trades data. Returns array of user's trades.</p> <p>http://developers.xstore.pro/documentation/#getTrades</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_trades(self, openedOnly: bool, **kwargs) -&gt; list[TradeRecord]:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getTrades  which is the preferred way of retrieving trades data. Returns array of user's trades.\n\n    [http://developers.xstore.pro/documentation/#getTrades](http://developers.xstore.pro/documentation/#getTrades)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getTrades\",\n        TradeRecord,\n        arguments=dict(openedOnly=openedOnly),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_trades_history","title":"get_trades_history","text":"<pre><code>get_trades_history(start: int, end: int = 0, **kwargs) -&gt; list[TradeRecord]\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getTrades  which is the preferred way of retrieving trades data. Returns array of user's trades which were closed within specified period of time.</p> <p>http://developers.xstore.pro/documentation/#getTradesHistory</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_trades_history(\n    self, start: int, end: int = 0, **kwargs\n) -&gt; list[TradeRecord]:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getTrades  which is the preferred way of retrieving trades data. Returns array of user's trades which were closed within specified period of time.\n\n    [http://developers.xstore.pro/documentation/#getTradesHistory](http://developers.xstore.pro/documentation/#getTradesHistory)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getTradesHistory\",\n        TradeRecord,\n        arguments=dict(start=start, end=end),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_trading_hours","title":"get_trading_hours","text":"<pre><code>get_trading_hours(symbols: list[str], **kwargs) -&gt; list[TradingHoursRecord]\n</code></pre> <p>Description: Returns quotes and trading times.</p> <p>http://developers.xstore.pro/documentation/#getTradingHours</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_trading_hours(\n    self, symbols: list[str], **kwargs\n) -&gt; list[TradingHoursRecord]:\n    \"\"\"\n    Description: Returns quotes and trading times.\n\n    [http://developers.xstore.pro/documentation/#getTradingHours](http://developers.xstore.pro/documentation/#getTradingHours)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getTradingHours\",\n        TradingHoursRecord,\n        arguments=dict(symbols=symbols),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.get_version","title":"get_version","text":"<pre><code>get_version(**kwargs) -&gt; VersionRecord\n</code></pre> <p>Description: Returns the current API version.</p> <p>http://developers.xstore.pro/documentation/#getVersion</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def get_version(self, **kwargs) -&gt; VersionRecord:\n    \"\"\"\n    Description: Returns the current API version.\n\n    [http://developers.xstore.pro/documentation/#getVersion](http://developers.xstore.pro/documentation/#getVersion)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"getVersion\",\n        VersionRecord,\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.login","title":"login","text":"<pre><code>login()\n</code></pre> <p>http://developers.xstore.pro/documentation/#login</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def login(\n    self,\n):\n    \"\"\"[http://developers.xstore.pro/documentation/#login](http://developers.xstore.pro/documentation/#login)\"\"\"\n    self._reader, self._writer = await asyncio.open_connection(\n        self._address, self._connection_info.port, ssl=True\n    )\n\n    await self._send_command_(\n        self._writer,\n        \"login\",\n        unauthenticated=True,\n        arguments=dict(userId=self._login, password=self._password),\n        appName=self._app_name,\n    )\n    response: RESPONSE | LOGIN_RESPONSE = await self._read_command_(\n        self._reader, raw=True\n    )\n    if not response[\"status\"]:\n        raise Exception(response[\"errorDescr\"])\n\n    self._stream_session_id = response[\"streamSessionId\"]\n    (\n        self._streaming_reader,\n        self._streaming_writer,\n    ) = await asyncio.open_connection(\n        self._address, self._connection_info.streaming, ssl=True\n    )\n    self._reading_task = asyncio.Task(self._stream_read_())\n    self._logged_in = True\n    self._callbacks = defaultdict(list)\n    await self.streaming_ping()\n</code></pre>"},{"location":"#pyxtb.api.Api.logout","title":"logout","text":"<pre><code>logout() -&gt; RESPONSE[StreamingTradeStatusRecord]\n</code></pre> <p>http://developers.xstore.pro/documentation/#logout</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def logout(self) -&gt; RESPONSE[StreamingTradeStatusRecord]:\n    \"\"\"[http://developers.xstore.pro/documentation/#logout](http://developers.xstore.pro/documentation/#logout)\"\"\"\n    await self._send_command_(self._writer, \"logout\")\n    self._logged_in = False\n</code></pre>"},{"location":"#pyxtb.api.Api.ping","title":"ping","text":"<pre><code>ping(**kwargs) -&gt; None\n</code></pre> <p>Description: Regularly calling this function is enough to refresh the internal state of all the components in the system. It is recommended that any application that does not execute other commands, should call this command at least once every 10 minutes. Please note that the streaming counterpart of this function is combination of ping  and getKeepAlive .</p> <p>http://developers.xstore.pro/documentation/#ping</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def ping(self, **kwargs) -&gt; None:\n    \"\"\"\n    Description: Regularly calling this function is enough to refresh the internal state of all the components in the system. It is recommended that any application that does not execute other commands, should call this command at least once every 10 minutes. Please note that the streaming counterpart of this function is combination of ping  and getKeepAlive .\n\n    [http://developers.xstore.pro/documentation/#ping](http://developers.xstore.pro/documentation/#ping)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"ping\",\n        None,\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.streaming_ping","title":"streaming_ping","text":"<pre><code>streaming_ping()\n</code></pre> <p>Description: Description: Regularly calling this function is enough to refresh the internal state of all the components in the system. Streaming connection, when any command is not sent by client in the session, generates only one way network traffic. It is recommended that any application that does not execute other commands, should call this command at least once every 10 minutes. Note: There is no response in return to this command.</p> <p>http://developers.xstore.pro/documentation/#streamping</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def streaming_ping(self):\n    \"\"\"\n    Description: Description: Regularly calling this function is enough to refresh the internal state of all the components in the system. Streaming connection, when any command is not sent by client in the session, generates only one way network traffic. It is recommended that any application that does not execute other commands, should call this command at least once every 10 minutes.\n    Note: There is no response in return to this command.\n\n    [http://developers.xstore.pro/documentation/#streamping](http://developers.xstore.pro/documentation/#streamping)\n    \"\"\"\n    await self._send_command_(\n        self._streaming_writer, \"ping\", streamSessionId=self._stream_session_id\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_get_balance","title":"subscribe_get_balance","text":"<pre><code>subscribe_get_balance(eventListener: Callable[[StreamingBalanceRecord], None], **kwargs)\n</code></pre> <p>Description: Allows to get actual account indicators values in real-time, as soon as they are available in the system.</p> <p>http://developers.xstore.pro/documentation/#streamgetBalance</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_get_balance(\n    self, eventListener: Callable[[StreamingBalanceRecord], None], **kwargs\n):\n    \"\"\"\n    Description: Allows to get actual account indicators values in real-time, as soon as they are available in the system.\n\n    [http://developers.xstore.pro/documentation/#streamgetBalance](http://developers.xstore.pro/documentation/#streamgetBalance)\n    \"\"\"\n    return self._subscribe_(\n        \"balance\", StreamingBalanceRecord, eventListener, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_get_candles","title":"subscribe_get_candles","text":"<pre><code>subscribe_get_candles(eventListener: Callable[[StreamingCandleRecord], None], symbol: str, **kwargs)\n</code></pre> <p>Description: Subscribes for and unsubscribes from API chart candles. The interval of every candle is 1 minute. A new candle arrives every minute.</p> <p>http://developers.xstore.pro/documentation/#streamgetCandles</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_get_candles(\n    self,\n    eventListener: Callable[[StreamingCandleRecord], None],\n    symbol: str,\n    **kwargs,\n):\n    \"\"\"\n    Description: Subscribes for and unsubscribes from API chart candles. The interval of every candle is 1 minute. A new candle arrives every minute.\n\n    [http://developers.xstore.pro/documentation/#streamgetCandles](http://developers.xstore.pro/documentation/#streamgetCandles)\n    \"\"\"\n    return self._subscribe_(\n        \"candles\", StreamingCandleRecord, eventListener, symbol=symbol, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_get_keep_alive","title":"subscribe_get_keep_alive","text":"<pre><code>subscribe_get_keep_alive(eventListener: Callable[[StreamingKeepAliveRecord], None], **kwargs)\n</code></pre> <p>Description: Subscribes for and unsubscribes from 'keep alive' messages. A new 'keep alive' message is sent by the API every 3 seconds.</p> <p>http://developers.xstore.pro/documentation/#streamgetKeepAlive</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_get_keep_alive(\n    self,\n    eventListener: Callable[[StreamingKeepAliveRecord], None],\n    **kwargs,\n):\n    \"\"\"\n    Description: Subscribes for and unsubscribes from 'keep alive' messages. A new 'keep alive' message is sent by the API every 3 seconds.\n\n    [http://developers.xstore.pro/documentation/#streamgetKeepAlive](http://developers.xstore.pro/documentation/#streamgetKeepAlive)\n    \"\"\"\n    return self._subscribe_(\n        \"keepAlive\", StreamingKeepAliveRecord, eventListener, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_get_news","title":"subscribe_get_news","text":"<pre><code>subscribe_get_news(eventListener: Callable[[StreamingNewsRecord], None], **kwargs)\n</code></pre> <p>Description: Subscribes for and unsubscribes from news.</p> <p>http://developers.xstore.pro/documentation/#streamgetNews</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_get_news(\n    self, eventListener: Callable[[StreamingNewsRecord], None], **kwargs\n):\n    \"\"\"\n    Description: Subscribes for and unsubscribes from news.\n\n    [http://developers.xstore.pro/documentation/#streamgetNews](http://developers.xstore.pro/documentation/#streamgetNews)\n    \"\"\"\n    return self._subscribe_(\"news\", StreamingNewsRecord, eventListener, **kwargs)\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_get_profits","title":"subscribe_get_profits","text":"<pre><code>subscribe_get_profits(eventListener: Callable[[StreamingProfitRecord], None], **kwargs)\n</code></pre> <p>Description: Subscribes for and unsubscribes from profits.</p> <p>http://developers.xstore.pro/documentation/#streamgetProfits</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_get_profits(\n    self, eventListener: Callable[[StreamingProfitRecord], None], **kwargs\n):\n    \"\"\"\n    Description: Subscribes for and unsubscribes from profits.\n\n    [http://developers.xstore.pro/documentation/#streamgetProfits](http://developers.xstore.pro/documentation/#streamgetProfits)\n    \"\"\"\n    return self._subscribe_(\n        \"profits\", StreamingProfitRecord, eventListener, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_tick_prices","title":"subscribe_tick_prices","text":"<pre><code>subscribe_tick_prices(eventListener: Callable[[StreamingTickRecord], None], symbol: str, minArrivalTime: int = 0, maxLevel: int | None = None, **kwargs)\n</code></pre> <p>Description: Establishes subscription for quotations and allows to obtain the relevant information in real-time, as soon as it is available in the system. The getTickPrices  command can be invoked many times for the same symbol, but only one subscription for a given symbol will be created. Please beware that when multiple records are available, the order in which they are received is not guaranteed.</p> <p>http://developers.xstore.pro/documentation/#streamgetTickPrices</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_tick_prices(\n    self,\n    eventListener: Callable[[StreamingTickRecord], None],\n    symbol: str,\n    minArrivalTime: int = 0,\n    maxLevel: int | None = None,\n    **kwargs,\n):\n    \"\"\"\n    Description: Establishes subscription for quotations and allows to obtain the relevant information in real-time, as soon as it is available in the system. The getTickPrices  command can be invoked many times for the same symbol, but only one subscription for a given symbol will be created. Please beware that when multiple records are available, the order in which they are received is not guaranteed.\n\n    [http://developers.xstore.pro/documentation/#streamgetTickPrices](http://developers.xstore.pro/documentation/#streamgetTickPrices)\n    \"\"\"\n    return self._subscribe_(\n        \"tickPrices\",\n        StreamingTickRecord,\n        eventListener,\n        symbol=symbol,\n        minArrivalTime=minArrivalTime,\n        maxLevel=maxLevel,\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_trade_status","title":"subscribe_trade_status","text":"<pre><code>subscribe_trade_status(eventListener: Callable[[StreamingTradeStatusRecord], None], **kwargs)\n</code></pre> <p>Description: Allows to get status for sent trade requests in real-time, as soon as it is available in the system. Please beware that when multiple records are available, the order in which they are received is not guaranteed.</p> <p>http://developers.xstore.pro/documentation/#streamgetTradeStatus</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_trade_status(\n    self, eventListener: Callable[[StreamingTradeStatusRecord], None], **kwargs\n):\n    \"\"\"\n    Description: Allows to get status for sent trade requests in real-time, as soon as it is available in the system. Please beware that when multiple records are available, the order in which they are received is not guaranteed.\n\n    [http://developers.xstore.pro/documentation/#streamgetTradeStatus](http://developers.xstore.pro/documentation/#streamgetTradeStatus)\n    \"\"\"\n    return self._subscribe_(\n        \"tradeStatus\", StreamingTradeStatusRecord, eventListener, **kwargs\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.subscribe_trades","title":"subscribe_trades","text":"<pre><code>subscribe_trades(eventListener: Callable[[StreamingTradeRecord], None], **kwargs)\n</code></pre> <p>Description: Establishes subscription for user trade status data and allows to obtain the relevant information in real-time, as soon as it is available in the system. Please beware that when multiple records are available, the order in which they are received is not guaranteed.</p> <p>http://developers.xstore.pro/documentation/#streamgetTrades</p> Source code in <code>pyxtb/api.py</code> <pre><code>def subscribe_trades(\n    self, eventListener: Callable[[StreamingTradeRecord], None], **kwargs\n):\n    \"\"\"\n    Description: Establishes subscription for user trade status data and allows to obtain the relevant information in real-time, as soon as it is available in the system. Please beware that when multiple records are available, the order in which they are received is not guaranteed.\n\n    [http://developers.xstore.pro/documentation/#streamgetTrades](http://developers.xstore.pro/documentation/#streamgetTrades)\n    \"\"\"\n    return self._subscribe_(\"trades\", StreamingTradeRecord, eventListener, **kwargs)\n</code></pre>"},{"location":"#pyxtb.api.Api.trade_transaction","title":"trade_transaction","text":"<pre><code>trade_transaction(tradeTransInfo: TradeTransInfoRecord, **kwargs) -&gt; TradeTransResponseRecord\n</code></pre> <p>Description: Starts trade transaction. tradeTransaction sends main transaction information to the server.</p> <p>http://developers.xstore.pro/documentation/#tradeTransaction</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def trade_transaction(\n    self, tradeTransInfo: TradeTransInfoRecord, **kwargs\n) -&gt; TradeTransResponseRecord:\n    \"\"\"\n    Description: Starts trade transaction. tradeTransaction sends main transaction information to the server.\n\n    [http://developers.xstore.pro/documentation/#tradeTransaction](http://developers.xstore.pro/documentation/#tradeTransaction)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"tradeTransaction\",\n        TradeTransResponseRecord,\n        arguments=dict(tradeTransInfo=tradeTransInfo.to_dict()),\n        **kwargs,\n    )\n</code></pre>"},{"location":"#pyxtb.api.Api.trade_transaction_status","title":"trade_transaction_status","text":"<pre><code>trade_transaction_status(order: int, **kwargs) -&gt; TradeTransactionStatusResponseRecord\n</code></pre> <p>Description: Please note that this function can be usually replaced by its streaming equivalent getTradeStatus  which is the preferred way of retrieving transaction status data. Returns current transaction status. At any time of transaction processing client might check the status of transaction on server side. In order to do that client must provide unique order taken from tradeTransaction  invocation.</p> <p>http://developers.xstore.pro/documentation/#tradeTransactionStatus</p> Source code in <code>pyxtb/api.py</code> <pre><code>async def trade_transaction_status(\n    self, order: int, **kwargs\n) -&gt; TradeTransactionStatusResponseRecord:\n    \"\"\"\n    Description: Please note that this function can be usually replaced by its streaming equivalent getTradeStatus  which is the preferred way of retrieving transaction status data. Returns current transaction status. At any time of transaction processing client might check the status of transaction on server side. In order to do that client must provide unique order taken from tradeTransaction  invocation.\n\n    [http://developers.xstore.pro/documentation/#tradeTransactionStatus](http://developers.xstore.pro/documentation/#tradeTransactionStatus)\n    \"\"\"\n    return await self._send_and_read_command_(\n        \"tradeTransactionStatus\",\n        TradeTransactionStatusResponseRecord,\n        arguments=dict(order=order),\n        **kwargs,\n    )\n</code></pre>"},{"location":"types/","title":"Types","text":""},{"location":"types/#pyxtb._types.CalendarRecord","title":"CalendarRecord","text":"<pre><code>CalendarRecord(country: str, current: str, forecast: str, impact: str, period: str, previous: str, time: Time, title: str, _other: CatchAll)\n</code></pre> <p>CALENDAR_RECORD</p> <p>http://developers.xstore.pro/documentation/#CALENDAR_RECORD</p>"},{"location":"types/#pyxtb._types.ChartLastInfoRecord","title":"ChartLastInfoRecord","text":"<pre><code>ChartLastInfoRecord(period: Period, start: Time, symbol: str, _other: CatchAll)\n</code></pre> <p>CHART_LAST_INFO_RECORD</p> <p>http://developers.xstore.pro/documentation/#CHART_LAST_INFO_RECORD</p>"},{"location":"types/#pyxtb._types.ChartRangeInfoRecord","title":"ChartRangeInfoRecord","text":"<pre><code>ChartRangeInfoRecord(period: Period, start: Time, symbol: str, end: Time, ticks: int, _other: CatchAll)\n</code></pre> <p>CHART_RANGE_INFO_RECORD</p> <p>http://developers.xstore.pro/documentation/#CHART_RANGE_INFO_RECORD</p>"},{"location":"types/#pyxtb._types.ChartResponseRecord","title":"ChartResponseRecord","text":"<pre><code>ChartResponseRecord(digits: int, rateInfos: list[RateInfoRecord], _other: CatchAll)\n</code></pre> <p>CHART_LAST_INFO_RESPONSE_RECORD</p>"},{"location":"types/#pyxtb._types.Command","title":"Command","text":"<p>               Bases: <code>IntEnum</code></p> <p>Command enum</p>"},{"location":"types/#pyxtb._types.Command.BALANCE","title":"BALANCE","text":"<pre><code>BALANCE = 6\n</code></pre> <p>Read only. Used in getTradesHistory for manager's deposit/withdrawal operations (profit&gt;0 for deposit, profit&lt;0 for withdrawal).</p>"},{"location":"types/#pyxtb._types.Command.BUY","title":"BUY","text":"<pre><code>BUY = 0\n</code></pre>"},{"location":"types/#pyxtb._types.Command.BUY_LIMIT","title":"BUY_LIMIT","text":"<pre><code>BUY_LIMIT = 2\n</code></pre>"},{"location":"types/#pyxtb._types.Command.BUY_STOP","title":"BUY_STOP","text":"<pre><code>BUY_STOP = 4\n</code></pre>"},{"location":"types/#pyxtb._types.Command.CREDIT","title":"CREDIT","text":"<pre><code>CREDIT = 7\n</code></pre> <p>Read only</p>"},{"location":"types/#pyxtb._types.Command.SELL","title":"SELL","text":"<pre><code>SELL = 1\n</code></pre>"},{"location":"types/#pyxtb._types.Command.SELL_LIMIT","title":"SELL_LIMIT","text":"<pre><code>SELL_LIMIT = 3\n</code></pre>"},{"location":"types/#pyxtb._types.Command.SELL_STOP","title":"SELL_STOP","text":"<pre><code>SELL_STOP = 5\n</code></pre>"},{"location":"types/#pyxtb._types.CommissionDefResponseRecord","title":"CommissionDefResponseRecord","text":"<pre><code>CommissionDefResponseRecord(commission: float, rateOfExchange: float, _other: CatchAll)\n</code></pre> <p>COMMISSION_DEF_RESPONSE_RECORD</p>"},{"location":"types/#pyxtb._types.CurrentUserDataRecord","title":"CurrentUserDataRecord","text":"<pre><code>CurrentUserDataRecord(companyUnit: int, currency: str, group: str, ibAccount: bool, leverage: Literal[1], leverageMultiplier: float, spreadType: Literal['FLOAT'] | None, trailingStop: bool, _other: CatchAll)\n</code></pre> <p>CURRENT_USER_DATA_RECORD</p>"},{"location":"types/#pyxtb._types.Day","title":"Day","text":"<p>               Bases: <code>IntEnum</code></p> <p>Day enum</p>"},{"location":"types/#pyxtb._types.Day.FRIDAY","title":"FRIDAY","text":"<pre><code>FRIDAY = 5\n</code></pre>"},{"location":"types/#pyxtb._types.Day.MONDAY","title":"MONDAY","text":"<pre><code>MONDAY = 1\n</code></pre>"},{"location":"types/#pyxtb._types.Day.SATURDAY","title":"SATURDAY","text":"<pre><code>SATURDAY = 6\n</code></pre>"},{"location":"types/#pyxtb._types.Day.SUNDAY","title":"SUNDAY","text":"<pre><code>SUNDAY = 7\n</code></pre>"},{"location":"types/#pyxtb._types.Day.THURSDAY","title":"THURSDAY","text":"<pre><code>THURSDAY = 4\n</code></pre>"},{"location":"types/#pyxtb._types.Day.TUESDAY","title":"TUESDAY","text":"<pre><code>TUESDAY = 2\n</code></pre>"},{"location":"types/#pyxtb._types.Day.WEDNESDAY","title":"WEDNESDAY","text":"<pre><code>WEDNESDAY = 3\n</code></pre>"},{"location":"types/#pyxtb._types.IBRecord","title":"IBRecord","text":"<pre><code>IBRecord(close_price: float, login: str, nominal: float, openPrice: float, side: int, surname: str, symbol: str, timestamp: Time, volume: float, _other: CatchAll)\n</code></pre> <p>IB_RECORD</p> <p>http://developers.xstore.pro/documentation/#IB_RECORD</p>"},{"location":"types/#pyxtb._types.MarginLevelRecord","title":"MarginLevelRecord","text":"<pre><code>MarginLevelRecord(balance: float, credit: float, currency: str, equity: float, margin: float, margin_free: float, margin_level: float, _other: CatchAll)\n</code></pre> <p>MARGIN_LEVEL_RECORD</p>"},{"location":"types/#pyxtb._types.MarginMode","title":"MarginMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>MarginMode enum</p>"},{"location":"types/#pyxtb._types.MarginMode.CFD","title":"CFD","text":"<pre><code>CFD = 103\n</code></pre>"},{"location":"types/#pyxtb._types.MarginMode.CFD_LEVERAGED","title":"CFD_LEVERAGED","text":"<pre><code>CFD_LEVERAGED = 102\n</code></pre>"},{"location":"types/#pyxtb._types.MarginMode.FOREX","title":"FOREX","text":"<pre><code>FOREX = 101\n</code></pre>"},{"location":"types/#pyxtb._types.MarginMode.UNKNOWN","title":"UNKNOWN","text":"<pre><code>UNKNOWN = 104\n</code></pre>"},{"location":"types/#pyxtb._types.MarginTradeRecord","title":"MarginTradeRecord","text":"<pre><code>MarginTradeRecord(margin: float, _other: CatchAll)\n</code></pre> <p>MARGIN_TRADE_RECORD</p>"},{"location":"types/#pyxtb._types.NewsTopicRecord","title":"NewsTopicRecord","text":"<pre><code>NewsTopicRecord(body: str, bodylen: int, key: str, time: Time, timeString: str, title: str, _other: CatchAll)\n</code></pre> <p>NEWS_TOPIC_RECORD</p> <p>http://developers.xstore.pro/documentation/#NEWS_TOPIC_RECORD</p>"},{"location":"types/#pyxtb._types.Period","title":"Period","text":"<p>               Bases: <code>IntEnum</code></p> <p>Period enum</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_D1","title":"PERIOD_D1","text":"<pre><code>PERIOD_D1 = 1440\n</code></pre> <p>1440 minutes (1 day)</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_H1","title":"PERIOD_H1","text":"<pre><code>PERIOD_H1 = 60\n</code></pre> <p>60 minutes (1 hour)</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_H4","title":"PERIOD_H4","text":"<pre><code>PERIOD_H4 = 240\n</code></pre> <p>240 minutes (4 hours)</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_M1","title":"PERIOD_M1","text":"<pre><code>PERIOD_M1 = 1\n</code></pre> <p>1 minute</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_M15","title":"PERIOD_M15","text":"<pre><code>PERIOD_M15 = 15\n</code></pre> <p>15 minutes</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_M30","title":"PERIOD_M30","text":"<pre><code>PERIOD_M30 = 30\n</code></pre> <p>30 minutes</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_M5","title":"PERIOD_M5","text":"<pre><code>PERIOD_M5 = 5\n</code></pre> <p>5 minutes</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_MN1","title":"PERIOD_MN1","text":"<pre><code>PERIOD_MN1 = 43200\n</code></pre> <p>43200 minutes (30 days)</p>"},{"location":"types/#pyxtb._types.Period.PERIOD_W1","title":"PERIOD_W1","text":"<pre><code>PERIOD_W1 = 10080\n</code></pre> <p>10080 minutes (1 week)</p>"},{"location":"types/#pyxtb._types.ProfitCalculationRecord","title":"ProfitCalculationRecord","text":"<pre><code>ProfitCalculationRecord(profit: float, _other: CatchAll)\n</code></pre> <p>PROFIT_CALCULATION_RECORD</p>"},{"location":"types/#pyxtb._types.ProfitMode","title":"ProfitMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>ProfitMode enum</p>"},{"location":"types/#pyxtb._types.ProfitMode.CFD","title":"CFD","text":"<pre><code>CFD = 6\n</code></pre>"},{"location":"types/#pyxtb._types.ProfitMode.FOREX","title":"FOREX","text":"<pre><code>FOREX = 5\n</code></pre>"},{"location":"types/#pyxtb._types.QuoteId","title":"QuoteId","text":"<p>               Bases: <code>IntEnum</code></p> <p>QuoteId enum</p>"},{"location":"types/#pyxtb._types.QuoteId.CROSS","title":"CROSS","text":"<pre><code>CROSS = 4\n</code></pre>"},{"location":"types/#pyxtb._types.QuoteId.DEPTH","title":"DEPTH","text":"<pre><code>DEPTH = 3\n</code></pre>"},{"location":"types/#pyxtb._types.QuoteId.FIXED","title":"FIXED","text":"<pre><code>FIXED = 1\n</code></pre>"},{"location":"types/#pyxtb._types.QuoteId.FLOAT","title":"FLOAT","text":"<pre><code>FLOAT = 2\n</code></pre>"},{"location":"types/#pyxtb._types.QuoteId.UNKNOWN_1","title":"UNKNOWN_1","text":"<pre><code>UNKNOWN_1 = 5\n</code></pre>"},{"location":"types/#pyxtb._types.QuoteId.UNKNOWN_2","title":"UNKNOWN_2","text":"<pre><code>UNKNOWN_2 = 6\n</code></pre>"},{"location":"types/#pyxtb._types.QuotesRecord","title":"QuotesRecord","text":"<pre><code>QuotesRecord(day: Day, fromT: Time, toT: Time, _other: CatchAll)\n</code></pre> <p>QUOTES_RECORD</p> <p>http://developers.xstore.pro/documentation/#QUOTES_RECORD</p>"},{"location":"types/#pyxtb._types.RateInfoRecord","title":"RateInfoRecord","text":"<pre><code>RateInfoRecord(close: float, ctm: Time, ctmString: str, high: float, low: float, open: float, vol: float, _other: CatchAll)\n</code></pre> <p>RATE_INFO_RECORD</p> <p>http://developers.xstore.pro/documentation/#RATE_INFO_RECORD</p>"},{"location":"types/#pyxtb._types.RequestStatus","title":"RequestStatus","text":"<p>               Bases: <code>IntEnum</code></p> <p>RequestStatus enum</p>"},{"location":"types/#pyxtb._types.RequestStatus.ACCEPTED","title":"ACCEPTED","text":"<pre><code>ACCEPTED = 3\n</code></pre> <p>The transaction has been executed successfully</p>"},{"location":"types/#pyxtb._types.RequestStatus.ERROR","title":"ERROR","text":"<pre><code>ERROR = 0\n</code></pre>"},{"location":"types/#pyxtb._types.RequestStatus.PENDING","title":"PENDING","text":"<pre><code>PENDING = 1\n</code></pre>"},{"location":"types/#pyxtb._types.RequestStatus.REJECTED","title":"REJECTED","text":"<pre><code>REJECTED = 4\n</code></pre> <p>The transaction has been rejected</p>"},{"location":"types/#pyxtb._types.ServerTimeRecord","title":"ServerTimeRecord","text":"<pre><code>ServerTimeRecord(time: Time, timeString: str, _other: CatchAll)\n</code></pre> <p>SERVER_TIME_RECORD</p>"},{"location":"types/#pyxtb._types.StepRecord","title":"StepRecord","text":"<pre><code>StepRecord(fromValue: float, step: float, _other: CatchAll)\n</code></pre> <p>STEP_RECORD</p> <p>http://developers.xstore.pro/documentation/#STEP_RECORD</p>"},{"location":"types/#pyxtb._types.StepRuleRecord","title":"StepRuleRecord","text":"<pre><code>StepRuleRecord(id: int, name: str, steps: list[StepRecord], _other: CatchAll)\n</code></pre> <p>STEP_RULE_RECORD</p> <p>http://developers.xstore.pro/documentation/#STEP_RULE_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingBalanceRecord","title":"StreamingBalanceRecord","text":"<pre><code>StreamingBalanceRecord(balance: float, credit: float, equity: float, margin: float, marginFree: float, marginLevel: float, _other: CatchAll)\n</code></pre> <p>STREAMING_BALANCE_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingCandleRecord","title":"StreamingCandleRecord","text":"<pre><code>StreamingCandleRecord(close: float, ctm: int, ctmString: str, high: float, low: float, open: float, quoteId: QuoteId, symbol: str, vol: float, _other: CatchAll)\n</code></pre> <p>STREAMING_CANDLE_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingKeepAliveRecord","title":"StreamingKeepAliveRecord","text":"<pre><code>StreamingKeepAliveRecord(timestamp: int, _other: CatchAll)\n</code></pre> <p>STREAMING_KEEP_ALIVE_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingNewsRecord","title":"StreamingNewsRecord","text":"<pre><code>StreamingNewsRecord(body: str, key: str, time: str, title: str, _other: CatchAll)\n</code></pre> <p>STREAMING_NEWS_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingProfitRecord","title":"StreamingProfitRecord","text":"<pre><code>StreamingProfitRecord(order: int, order2: int, position: int, profit: float, _other: CatchAll)\n</code></pre> <p>STREAMING_PROFIT_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingTickRecord","title":"StreamingTickRecord","text":"<pre><code>StreamingTickRecord(ask: float, askVolume: int, bid: float, bidVolume: int, high: float, level: int, low: float, quoteId: QuoteId, spreadRaw: float, spreadTable: float, symbol: str, timestamp: int, _other: CatchAll)\n</code></pre> <p>STREAMING_TICK_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingTradeRecord","title":"StreamingTradeRecord","text":"<pre><code>StreamingTradeRecord(close_price: float, close_time: int | None, closed: bool, cmd: int, comment: str, commission: float, customComment: str | None, digits: int, expiration: int | None, margin_rate: float, offset: int, open_price: float, open_time: int, order: int, order2: int, position: int, profit: float, sl: float, state: str, storage: float, symbol: str, tp: float, type: int, volume: float, _other: CatchAll)\n</code></pre> <p>STREAMING_TRADE_RECORD</p>"},{"location":"types/#pyxtb._types.StreamingTradeStatusRecord","title":"StreamingTradeStatusRecord","text":"<pre><code>StreamingTradeStatusRecord(customComment: str | None, message: str | None, order: int, price: float, requestStatus: int, _other: CatchAll)\n</code></pre> <p>STREAMING_TRADE_STATUS_RECORD</p>"},{"location":"types/#pyxtb._types.SymbolRecord","title":"SymbolRecord","text":"<pre><code>SymbolRecord(ask: float, bid: float, categoryName: str, contractSize: int, currency: str, currencyPair: bool, currencyProfit: str, description: str, expiration: Time | None, groupName: str, high: float, initialMargin: int, instantMaxVolume: int, leverage: float, longOnly: bool, lotMax: float, lotMin: float, lotStep: float, low: float, marginHedged: int, marginHedgedStrong: bool, marginMaintenance: int | None, marginMode: MarginMode, percentage: float, precision: int, profitMode: ProfitMode, quoteId: QuoteId, shortSelling: bool, spreadRaw: float, spreadTable: float, starting: Time | None, stepRuleId: int, stopsLevel: int, swap_rollover3days: int, swapEnable: bool, swapLong: float, swapShort: float, swapType: int, symbol: str, tickSize: float, tickValue: float, time: Time, timeString: str, trailingEnabled: bool, type: int, _other: CatchAll)\n</code></pre> <p>SYMBOL_RECORD</p> <p>http://developers.xstore.pro/documentation/#SYMBOL_RECORD</p>"},{"location":"types/#pyxtb._types.TickPricesResponseRecord","title":"TickPricesResponseRecord","text":"<pre><code>TickPricesResponseRecord(quotations: list[TickRecord], _other: CatchAll)\n</code></pre> <p>TICK_PRICES_RESPONSE_RECORD</p>"},{"location":"types/#pyxtb._types.TickRecord","title":"TickRecord","text":"<pre><code>TickRecord(ask: float, askVolume: int, bid: float, bidVolume: int, high: float, level: int, low: float, spreadRaw: float, spreadTable: float, symbol: str, timestamp: Time, _other: CatchAll)\n</code></pre> <p>TICK_RECORD</p> <p>http://developers.xstore.pro/documentation/#TICK_RECORD</p>"},{"location":"types/#pyxtb._types.TradeRecord","title":"TradeRecord","text":"<pre><code>TradeRecord(close_price: float, close_time: Time | None, close_timeString: str | None, closed: bool, cmd: Command, comment: str, commission: float, customComment: str | None, digits: int, expiration: Time | None, expirationString: str | None, margin_rate: float, offset: int, open_price: float, open_time: Time, open_timeString: str, order: int, order2: int, position: int, profit: float | None, sl: float, storage: float, symbol: str, timestamp: Time, tp: float, volume: float, _other: CatchAll)\n</code></pre> <p>TRADE_RECORD</p> <p>http://developers.xstore.pro/documentation/#TRADE_RECORD</p>"},{"location":"types/#pyxtb._types.TradeTransInfoRecord","title":"TradeTransInfoRecord","text":"<pre><code>TradeTransInfoRecord(cmd: Command, customComment: str | None, expiration: float, offset: int, order: int, price: float, sl: float, symbol: str, tp: float, type: TransactionType, volume: float, _other: CatchAll)\n</code></pre> <p>TRADE_TRANS_INFO</p> <p>http://developers.xstore.pro/documentation/#TRADE_TRANS_INFO</p>"},{"location":"types/#pyxtb._types.TradeTransResponseRecord","title":"TradeTransResponseRecord","text":"<pre><code>TradeTransResponseRecord(order: int, _other: CatchAll)\n</code></pre> <p>TRADE_TRANS_RESPONSE_RECORD</p>"},{"location":"types/#pyxtb._types.TradeTransactionStatusResponseRecord","title":"TradeTransactionStatusResponseRecord","text":"<pre><code>TradeTransactionStatusResponseRecord(ask: float, bid: float, customComment: str | None, message: str | None, order: int, requestStatus: RequestStatus, _other: CatchAll)\n</code></pre> <p>TRADE_TRANS_STATUS_RESPONSE_RECORD</p>"},{"location":"types/#pyxtb._types.TradingHoursRecord","title":"TradingHoursRecord","text":"<pre><code>TradingHoursRecord(quotes: list[QuotesRecord], symbol: str, trading: list[TradingRecord], _other: CatchAll)\n</code></pre> <p>TRADING_HOURS_RECORD</p> <p>http://developers.xstore.pro/documentation/#TRADING_HOURS_RECORD</p>"},{"location":"types/#pyxtb._types.TradingRecord","title":"TradingRecord","text":"<pre><code>TradingRecord(day: Day, fromT: Time, toT: Time, _other: CatchAll)\n</code></pre> <p>TRADING_RECORD</p> <p>http://developers.xstore.pro/documentation/#TRADING_RECORD</p>"},{"location":"types/#pyxtb._types.TransactionType","title":"TransactionType","text":"<p>               Bases: <code>IntEnum</code></p> <p>TransactionType enum</p>"},{"location":"types/#pyxtb._types.TransactionType.CLOSE","title":"CLOSE","text":"<pre><code>CLOSE = 2\n</code></pre> <p>Order close</p>"},{"location":"types/#pyxtb._types.TransactionType.DELETE","title":"DELETE","text":"<pre><code>DELETE = 4\n</code></pre> <p>Order delete, only used in the tradeTransaction command</p>"},{"location":"types/#pyxtb._types.TransactionType.MODIFY","title":"MODIFY","text":"<pre><code>MODIFY = 3\n</code></pre> <p>Order modify, only used in the tradeTransaction command</p>"},{"location":"types/#pyxtb._types.TransactionType.OPEN","title":"OPEN","text":"<pre><code>OPEN = 0\n</code></pre> <p>Order open, used for opening orders</p>"},{"location":"types/#pyxtb._types.TransactionType.PENDING","title":"PENDING","text":"<pre><code>PENDING = 1\n</code></pre> <p>Order pending, only used in the streaming getTrades command</p>"},{"location":"types/#pyxtb._types.VersionRecord","title":"VersionRecord","text":"<pre><code>VersionRecord(version: str, _other: CatchAll)\n</code></pre> <p>VERSION_RECORD</p> <p>http://developers.xstore.pro/documentation/#VERSION_RECORD</p>"}]}